#!/bin/bash

DEFAULT_CONFIG_FILE="/usr/local/etc/roboger_push.ini"

DEFAULT_TIMEOUT=5

DEFAULT_RETRY_DELAY=3

shopt -s extglob

_CONFIG=()
_SECTIONS=""
_PROP=""

_EX=1

SENDER=""
LOCATION=""
KEYWORDS=""
LEVEL=""
SUBJECT=""
EXPIRES=""
MSG=""
CONFIG_FILE=${DEFAULT_CONFIG_FILE}

function parseIniFile() {
    local LINE=""
    local SECTION=""
    local KEY=""
    local VALUE=""

    local IFS=""

    while read LINE 
    do
        LINE=${LINE%%[;#]*}                             # Strip comments
        LINE=${LINE%%*( )}                              # Strip trailing whitespace

        if [[ -n $KEY && $LINE =~ ^[[:space:]]+(.+) ]]  # Continuation - append value
        then
            VALUE+=" ${BASH_REMATCH[1]}"
        else
            if [[ -n $KEY ]]                            # No continuation
            then
                _CONFIG=(${_CONFIG[@]} "${SECTION}.${KEY}" "${VALUE}")
                KEY=""
                VALUE=""
            fi

            if [[ $LINE =~ ^\[([[:alnum:]]+)\] ]]       # Section
            then
                SECTION=${BASH_REMATCH[1]}
				_SECTIONS="${_SECTIONS} ${SECTION}"
                KEY=""
            elif [[ $LINE =~ ^([^[:space:]]+)[[:space:]]*=[[:space:]]*(.+) ]] # Property
            then 
                KEY=${BASH_REMATCH[1]}
                VALUE="${BASH_REMATCH[2]}"
            fi
        fi
    done

    if [[ -n $KEY ]]
    then
        _CONFIG=(${_CONFIG[@]} "${SECTION}.${KEY}" "${VALUE}")
    fi
}

function getProperty() {
	_PROP=""
    local -i i
    local KEY=$1
    for ((i=0; i<${#_CONFIG[@]}; i+=2))
    do
        if [[ ${_CONFIG[$i]} =~ ^\.?${KEY} ]]
        then
            #echo ${_CONFIG[((i+1))]}
            _PROP=${_CONFIG[((i+1))]}
            return 0
        fi
    done
    return 1
}

function sendPush() {
    local -i i
    local SRV=$1
    getProperty ${SRV}.addr
    local ADDR=${_PROP}
    getProperty ${SRV}.push
    local PUSH=${_PROP}
    getProperty ${SRV}.retries
    local RETRIES=${_PROP}
    getProperty ${SRV}.retry_delay
    local RETRY_DELAY=${_PROP}
    getProperty ${SRV}.timeout
    local T=${_PROP}
    getProperty ${SRV}.backup
    local BACKUP_SRV=${_PROP}
    [ "x${RETRIES}" == "x" ] && RETRIES=1
    [ "x${RETRY_DELAY}" == "x" ] && RETRY_DELAY=${DEFAULT_RETRY_DELAY}
    [ "x${T}" == "x" ] && T=_$DEFAULT_TIMEOUT
    if [ "x${ADDR}" != "x" ] && [ "x{$PUSH}" != "x" ]; then
        for ((i=1; i<=${RETRIES}; i+=1))
        do
            local _data="{ \"msg\": \"${MSG}\", \"location\": \"${LOCATION}\", \"keywords\": \"${KEYWORDS}\", \"expires\": \"${EXPIRES}\", \"level\": \"${LEVEL}\", \"sender\" : \"${SENDER}\", \"addr\":\"${ADDR}\" }"
            local CODE=`curl --header "Content-Type: application/json" --data "${_data}" -X POST -m ${T} -s -o /dev/null -w "%{http_code}" ${PUSH}/push`
            if [ "x${CODE}" == "x200" ]; then
                echo "${SRV} ${ADDR} - sent"
                _EX=0
                break
            fi
            if [ "x${CODE}" == "x500" ] || [ "x${CODE}" == "x404" ] || [ "x${CODE}" == "x403" ]; then
                echo -n "${SRV} ${ADDR} - error"
                if [ "x${BACKUP_SRV}" != "x" ]; then
                    echo ", sending via backup"
                    sendPush ${BACKUP_SRV}
                else
                    echo
                fi
                break
            fi
            if [ $i -lt ${RETRIES} ]; then
                echo "${SRV} ${ADDR} - failed, retrying"
                sleep ${RETRY_DELAY}
            else
                echo -n "${SRV} ${ADDR} - error"
                if [ "x${BACKUP_SRV}" != "x" ]; then
                    echo ", sending via backup"
                    sendPush ${BACKUP_SRV}
                else
                    echo
                fi
            fi
        done
    else
        echo "Skipping ${SRV}, no addr or push"

    fi
}


function showHelp() {
cat <<EOF
Usage: roboger-push [-f config] [-s subject] [-l level] [-x sender] [-n location] [-k keywords] [-m message]

    -f  config file to use (default: ${DEFAULT_CONFIG_FILE})

    -s  event subject

    -l  event level: debug, info(default), warning, error or critical
        you may use a single letter, i.e. 'e' for 'error'

    -x  sender (default: user @ hostname)
    -n  event location
    -k  event keywords (comma separated)
    -m  event message (will be read from stdin if not specified)

EOF
}


while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -f)
            CONFIG_FILE="$2"
            shift
            shift
        ;;
        -x) SENDER="$2"
            shift
            shift
        ;;
        -n) LOCATION="$2"
            shift
            shift
        ;;
        -k) KEYWORDS="$2"
            shift
            shift
        ;;
        -l) LEVEL="$2"
            shift
            shift
        ;;
        -s) SUBJECT="$2"
            shift
            shift
        ;;
        -e) EXPIRES="$2"
            shift
            shift
        ;;
        -m) MSG="$2"
            shift
            shift
        ;;
        -h) showHelp
            exit 0
        ;;
        *)
            echo "Unknown option: ${key}"
            showHelp
            exit -1
        ;;
    esac
done

if [ ! -f ${CONFIG_FILE} ]; then
    echo "config not found: ${CONFIG_FILE}. Use -f to specify custom config file, -h for help"
    exit 3
fi

[ "x${SENDER}" == "x" ] && SENDER="`whoami`@`hostname`"
[ "x${MSG}" == "x" ] && MSG=`sed ':a;N;$!ba;s/\n/\\\\n/g'`

parseIniFile < $CONFIG_FILE
for SRV in ${_SECTIONS}; do
	getProperty ${SRV}.type
    if [ "x${_PROP}" != "xbackup" ]; then
        sendPush ${SRV}
    fi
done
exit $_EX
