#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK

__author__ = "Altertech Group, http://www.altertech.com/"
__copyright__ = "Copyright (C) 2018 Altertech Group"
__license__ = "See https://www.roboger.com/"
__version__ = "1.0.0"

import os
import sys
import argparse
import json
import jsonpickle
import configparser
import requests
import re

_pd_cols = {
    'ls_subscriptions':
    ['id', 'active', 'level', 'senders', 'location', 'keywords'],
    'ls_events': [
        'id', 'd', 'delivered', 'sender', 'subject', 'location', 'keywords',
        'media'
    ]
}

_level_match_sign = {'g': ' >', 'ge': '>=', 'l': ' <', 'le': '<=', 'e': '='}


def format_json(obj, minimal=False):
    return json.dumps(json.loads(jsonpickle.encode(obj,
            unpicklable = False)), indent = 4, sort_keys = True) \
                if not minimal else jsonpickle.encode(obj, unpicklable = False)


def print_json(obj):
    print(format_json(obj))


def _prepare_result_data(data):
    lse_cols = ['id', 'active', 'skip_dups', 'type', 'description']
    j = data.copy()
    for i in j:
        try:
            d = i['description']
            if d is not None and d != '':
                i['description'] = '\'' + d + '\''
        except:
            pass
        try:
            del i['data']
        except:
            pass
        try:
            del i['data2']
        except:
            pass
        try:
            del i['data3']
        except:
            pass
        try:
            del i['destroyed']
        except:
            pass
        if func in ['ls_endpoints', 'ls_subscriptions']:
            try:
                del i['addr_id']
                del i['endpoint_id']
            except:
                pass
        if func == 'ls_endpoints':
            i['type'] += ' (%r)' % i['type_id']
            del i['type_id']
            info = []
            for k, v in i.copy().items():
                if k not in lse_cols:
                    info.append('%s : %r' % (k, v))
                    del i[k]
            i['parameters'] = ', '.join(sorted(info))
        elif func == 'ls_subscriptions':
            i['level'] = _level_match_sign[i['level_match']] + ' ' + i['level']
            i['keywords'] = ','.join(i['keywords'])
            i['senders'] = ','.join(i['senders'])
        elif func == 'ls_events':
            if i['media']: i['media'] = 'YES'
            i['keywords'] = ','.join(i['keywords'])
    return j


def pprint_df(data):
    pd.options.display.max_colwidth = 65
    df = pd.DataFrame(data=_prepare_result_data(data))
    if func in _pd_cols:
        cols = _pd_cols[func]
    else:
        cols = list(df)
        # move id column to the front if exist
        try:
            cols.insert(0, cols.pop(cols.index('id')))
        except:
            pass
        # move description column to the end if exist
        try:
            cols.append(cols.pop(cols.index('description')))
        except:
            pass
    df = df.ix[:, cols]
    try:
        # move id to the header
        df.set_index('id', inplace=True)
        out = df.to_string().split('\n')
        # print header
        print('id' + out[0][2:])
        # print separator
        print('-' * len(out[0]))
        # print data frame
        [print(o) for o in out[2:]]
    except:
        print(df)


dir_etc = os.path.dirname(os.path.realpath(__file__)) + '/../etc'

default_timeout = 5
apikey = None
apiuri = None

debug = False

xparams = {}

_me = 'Roboger client version %s' % __version__

ap = argparse.ArgumentParser(description=_me)
ap.add_argument('-U','--api-uri',
        help='specify API uri (http://host:port), if no uri specified,' + \
                ' local config will be parsed ', dest='_uri', metavar='URI')
ap.add_argument(
    '-V',
    '--version',
    help='print version and exit',
    action='store_true',
    dest='_ver')
ap.add_argument(
    '-K',
    '--api-key',
    help='master key, if no key specified, local master key will be used',
    dest='_key',
    metavar='KEY')
ap.add_argument(
    '-T',
    '--api-timeout',
    help='API request timeout (in seconds)',
    type=float,
    default=default_timeout,
    dest='_timeout',
    metavar='TIMEOUT')
ap.add_argument(
    '-J',
    '--json',
    help='print result as JSON',
    action='store_true',
    dest='_json',
    default=False)
ap.add_argument(
    '-D',
    '--debug',
    help='enable debug messages',
    action='store_true',
    dest='_debug',
    default=False)

sp = ap.add_subparsers(
    dest='_func', metavar='command', help='API function to execute')

sp_test = sp.add_parser('test', help='test API')

# address commands
sp_ls_addr = sp.add_parser('ls_addr', help='list address(es)')
sp_ls_addr.add_argument(
    '_address', help='address or address id', nargs='?', metavar='ADDRESS')

sp_mk_addr = sp.add_parser('mk_addr', help='create new address')

sp_ch_addr = sp.add_parser('ch_addr', help='change existing address')
sp_ch_addr.add_argument(
    '_address', help='address or address id', metavar='ADDRESS')

sp_set_addr_active = sp.add_parser(
    'set_addr_active', help='set address active or inactive')
sp_set_addr_active.add_argument(
    '_address', help='address or address id', metavar='ADDRESS')
sp_set_addr_active.add_argument(
    '-d',
    '--deactivate',
    help='deactivate address',
    dest='active',
    action='store_false')

sp_rm_addr = sp.add_parser('rm_addr', help='delete address')
sp_rm_addr.add_argument(
    '_address', help='address or address id', metavar='ADDRESS')

# endpoint commands
sp_ls_endpoint_types = sp.add_parser(
    'ls_endpoint_types', help='list ids of endpoint types')

sp_ls_endpoints = sp.add_parser('ls_endpoints', help='list endpoints')
sp_ls_endpoints.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int, nargs='?')
sp_ls_endpoints.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_mk_endpoint = sp.add_parser('mk_endpoint', help='create new endpoint')
sp_mk_endpoint.add_argument(
    '_address', help=argparse.SUPPRESS, metavar='ADDRESS')
sp_mk_endpoint.add_argument('et', help='endpoint type id', type=int)
sp_mk_endpoint.add_argument(
    'data', help='endpoint data (email, url, webhook, chat id etc.)')
sp_mk_endpoint.add_argument(
    '--data2',
    help='endpoint data 2 ("rich" for slack endpoint to send rich format)')
sp_mk_endpoint.add_argument(
    '--data3', help='endpoint data 3 (params for http endpoints)')
sp_mk_endpoint.add_argument('-o', '--description', help='endpoint description')

sp_set_endpoint_active = sp.add_parser(
    'set_endpoint_active', help='set endpoint active or inactive')
sp_set_endpoint_active.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int)
sp_set_endpoint_active.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_set_endpoint_active.add_argument(
    '-d',
    '--deactivate',
    help='deactivate endpoint',
    dest='active',
    action='store_false')

sp_set_endpoint_data = sp.add_parser(
    'set_endpoint_data', help='set endpoint data params')
sp_set_endpoint_data.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int)
sp_set_endpoint_data.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_set_endpoint_data.add_argument(
    'data', help='endpoint data (email, url, webhook, chat id etc.)')
sp_set_endpoint_data.add_argument(
    '--data2',
    help='endpoint data 2 ("rich" for slack endpoint to send rich format)')
sp_set_endpoint_data.add_argument(
    '--data3', help='endpoint data 3 (params for http endpoints)')

sp_set_endpoint_description = sp.add_parser(
    'set_endpoint_description', help='set endpoint description')
sp_set_endpoint_description.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int)
sp_set_endpoint_description.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_set_endpoint_description.add_argument(
    '-o', '--description', help='endpoint description')

sp_set_endpoint_skip_dups = sp.add_parser(
    'set_endpoint_skip_dups', help='set endpoint skip_dups')
sp_set_endpoint_skip_dups.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int)
sp_set_endpoint_skip_dups.add_argument(
    'data', help='skip dups time (in sec)', metavar='DELAY', type=int)
sp_set_endpoint_skip_dups.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_rm_endpoint = sp.add_parser('rm_endpoint', help='delete endpoint')
sp_rm_endpoint.add_argument(
    'endpoint_id', help='endpoint id', metavar='ID', type=int)
sp_rm_endpoint.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

# subscription commands
sp_ls_subscriptions = sp.add_parser(
    'ls_subscriptions', help='list subscriptions')
sp_ls_subscriptions.add_argument(
    'subscription_id',
    help='subscription id',
    metavar='ID',
    type=int,
    nargs='?')
sp_ls_subscriptions.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_ls_subscriptions.add_argument(
    '-e', '--endpoint_id', help='endpoint id', type=int, metavar='ENDPOINT_ID')

sp_mk_subscription = sp.add_parser(
    'mk_subscription', help='create new subscription')
sp_mk_subscription.add_argument(
    'endpoint_id', help='endpoint id', metavar='ENDPOINT_ID', type=int)
sp_mk_subscription.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_mk_subscription.add_argument('-n', '--location', help='event location')
sp_mk_subscription.add_argument(
    '-k', '--keywords', help='keywords, comma separated')
sp_mk_subscription.add_argument(
    '-x', '--senders', help='senders, comma separated')
sp_mk_subscription.add_argument(
    '-l', '--level', help='subscription level', dest='_level')
sp_mk_subscription.add_argument(
    '-m',
    '--level-match',
    help='subscription level match',
    choices=['ge', 'le', 'l', 'g', 'e'])

sp_set_subscription_active = sp.add_parser(
    'set_subscription_active', help='set subscription active or inactive')
sp_set_subscription_active.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_set_subscription_active.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')
sp_set_subscription_active.add_argument(
    '-d',
    '--deactivate',
    help='deactivate subscription',
    dest='active',
    action='store_false')

sp_set_subscription_location = sp.add_parser(
    'set_subscription_location', help='set subscription location')
sp_set_subscription_location.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_set_subscription_location.add_argument(
    'location', help='event location', nargs='?')
sp_set_subscription_location.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_set_subscription_keywords = sp.add_parser(
    'set_subscription_keywords', help='set subscription keywords')
sp_set_subscription_keywords.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_set_subscription_keywords.add_argument(
    'keywords', help='keywords, comma separated', nargs='?')
sp_set_subscription_keywords.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_set_subscription_senders = sp.add_parser(
    'set_subscription_senders', help='set subscription senders')
sp_set_subscription_senders.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_set_subscription_senders.add_argument(
    'senders', help='senders, comma separated', nargs='?')
sp_set_subscription_senders.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_set_subscription_level = sp.add_parser(
    'set_subscription_level', help='set subscription level')
sp_set_subscription_level.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_set_subscription_level.add_argument(
    '_level', help='subscription level', nargs='?', metavar='level')
sp_set_subscription_level.add_argument(
    '-m',
    '--level-match',
    help='subscription level match',
    choices=['ge', 'le', 'l', 'g', 'e'])
sp_set_subscription_level.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_rm_subscription = sp.add_parser(
    'rm_subscription', help='delete subscription')
sp_rm_subscription.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_rm_subscription.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

# subscription copy functions
sp_copy_subscription = sp.add_parser(
    'copy_subscription', help='copy subsciption to a new one')
sp_copy_subscription.add_argument(
    'subscription_id', help='subscription id', metavar='ID', type=int)
sp_copy_subscription.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

sp_copy_endpoint_subscriptions = sp.add_parser(
    'copy_endpoint_subscriptions',
    help=
    'delete target endpoint subscriptions and copy' + \
        ' source endpoint subscriptions to it'
)
sp_copy_endpoint_subscriptions.add_argument(
    'endpoint_id',
    help='source endpoint id',
    metavar='SOURCE_ENDPOINT_ID',
    type=int)
sp_copy_endpoint_subscriptions.add_argument(
    'endpoint_id_t',
    help='target endpoint id',
    metavar='TARGET_ENDPOINT_ID',
    type=int)
sp_copy_endpoint_subscriptions.add_argument(
    '-a',
    '--address',
    help=argparse.SUPPRESS,
    metavar='ADDRESS',
    dest='_address')

# ls events
sp_ls_events = sp.add_parser('ls_events', help='list events (if stored)')
sp_ls_events.add_argument(
    '_address', help='address or address id', metavar='ADDRESS')
sp_ls_events.add_argument(
    '-l', '--limit', help='limit output to N events', metavar='N', type=int)

try:
    import argcomplete
    argcomplete.autocomplete(ap)
except:
    pass

a = ap.parse_args()

if a._ver:
    print(_me)
    sys.exit()

apiuri = a._uri
apikey = a._key

debug = a._debug

func = a._func

timeout = a._timeout

for k, v in vars(a).items():
    if k and k[0] != '_' and v is not None:
        xparams[k] = v

if hasattr(a, '_address') and a._address:
    try:
        xparams['addr_id'] = int(a._address)
    except:
        xparams['addr'] = a._address

if hasattr(a, '_level') and a._level is not None:
    try:
        xparams['level_id'] = int(a._level)
    except:
        xparams['level'] = a._level

if func is None:
    ap.print_usage()
    sys.exit(2)

if not apiuri or not apikey:
    cfg = configparser.ConfigParser(inline_comment_prefixes=';')
    cfg.readfp(open(dir_etc + '/roboger.ini'))
    if not apikey:
        try:
            apikey = cfg.get('api', 'masterkey')
        except:
            pass
    if not apiuri:
        try:
            l = cfg.get('api', 'listen')
            proto = 'http'
        except:
            try:
                l = cfg.get('api', 'ssl_listen')
                proto = 'https'
            except:
                l = None
        if l:
            try:
                host, port = l.split(':')
            except:
                host = l
                port = '80'
            if host == '0.0.0.0': host = '127.0.0.1'
            apiuri = '%s://%s:%s' % (proto, host, port)
    try:
        development = (cfg.get('server', 'development') == 'yes')
        if development: debug = True
    except:
        pass

if not apiuri:
    print('no API URI specified')
    sys.exit(5)

apiuri_r = apiuri + '/manage/' + func

if debug:
    print("API request: %s" % apiuri_r)
    print("API max timeout: %u sec" % timeout)
    print("API requsts params:")
    print_json(xparams)
    print()

xparams['k'] = apikey

if not apikey:
    print('no API masterkey specified')
    sys.exit(6)

try:
    r = requests.post(apiuri_r, json=xparams, timeout=timeout)
except:
    print('API error: can not connect (%s)' % apiuri)
    sys.exit(1)

if debug:
    print("API response code: %s" % r.status_code)
if r.status_code == 200:
    try:
        j = jsonpickle.decode(r.text)
    except:
        print('API error: invalid json response')
        sys.exit(3)
    if a._json:
        print_json(j)
    else:
        if isinstance(j, dict):
            rprinted = False
            for v in sorted(j.keys()):
                if v != 'result':
                    print(("{:>%u} : {}" % max(map(len, j))).format(v, j[v]))
                    rprinted = True
            if not rprinted:
                print('OK')
        elif isinstance(j, list):
            if j:
                import pandas as pd
                pprint_df(j)
            else:
                print('no data')
        else:
            print(j)
else:
    print("API error %u" % (r.status_code))
    if debug: print(r.text)
    sys.exit(2)
