#!/usr/bin/env python3

import os
import yaml
import tempfile
from pathlib import Path

dir_me = Path(__file__).absolute().parents[1]

default_timeout = 5

import sys
sys.path.insert(0, dir_me.as_posix())

import argparse

ap = argparse.ArgumentParser()

ap.add_argument('-V',
                '--version',
                help='print version and exit',
                action='store_true')
ap.add_argument(
    '-T',
    '--timeout',
    help=f'API request timeout (in seconds, default: {default_timeout})',
    type=float,
    default=default_timeout,
    metavar='SEC')
ap.add_argument('-F',
                '--config-file',
                help='alternative server/client config file',
                metavar='FILE')
ap.add_argument('-o',
                '--output',
                help='output',
                choices=['raw', 'json', 'yaml'],
                default='raw')

sp = ap.add_subparsers(dest='command', help='command to execute', required=True)

sp_test = sp.add_parser('test', help='Test server')

for i in ['addr', 'endpoint', 'subscription']:
    iap = sp.add_parser(i, help=f'{i} management')
    funcs = [
        'list', 'create', 'describe', 'edit', 'delete', 'disable', 'enable'
    ]
    if i == 'addr':
        funcs.append('change')
    isp = iap.add_subparsers(dest='func', help=f'{i} commands', required=True)
    for f in funcs:
        x = isp.add_parser(f)
        if i != 'addr' or f not in ['list', 'create']:
            x.add_argument('resource', help='current/parent resource')
        if i == 'endpoint' and f == 'create':
            x.add_argument('plugin_name', help='plugin name')

a = ap.parse_args()

import roboger.manager

client_config = True

if a.config_file:
    fname = ap.config_file
else:
    fname = os.path.expanduser('~/.roboger-cmd.yml')
    if not Path(fname).exists():
        client_config = False
        fname = dir_me / 'etc/roboger.yml'
    if not Path(fname).exists():
        fname = '/usr/local/etc/roboger.yml'
with open(fname) as fh:
    config = yaml.load(fh.read())

format_uri = lambda uri: 'http://{}'.format(uri.replace('0.0.0.0', '127.0.0.1'))

if client_config:
    api = roboger.manager.ManagementAPI(api_uri=config['uri'],
                                        api_key=config['key'],
                                        timeout=a.timeout)
    limits = config.get('limits')
else:
    api = roboger.manager.ManagementAPI(
        api_uri=format_uri(config['roboger']['gunicorn']['listen']),
        api_key=config['roboger']['master']['key'],
        timeout=a.timeout)
    limits = config['roboger'].get('limits')

if limits:
    roboger.manager.use_limits = True

roboger.manager.default_api = api

result = None

editor = os.environ.get('EDITOR', 'vi')


def edit_obj(obj):
    obj.load()
    fd, fname = tempfile.mkstemp('.yaml')
    try:
        with os.fdopen(fd, 'w') as tmp:
            fc = yaml.dump(obj.serialize(include_protected_fields=False),
                           default_flow_style=False)
            tmp.write(fc)
        from hashlib import sha256
        oldhash = sha256(fc.encode()).digest()
        os.system(f'{editor} {fname}')
        with open(fname) as tmp:
            fc = tmp.read()
            newhash = sha256(fc.encode()).digest()
        if oldhash == newhash:
            return ''
        else:
            obj.load(data=yaml.load(fc), load_protected_fields=False)
            obj.save()
    finally:
        os.unlink(fname)


def process_obj_func(obj):
    if a.func == 'delete':
        obj.delete()
    elif a.func == 'describe':
        obj.load()
        return dict(obj)
    elif a.func == 'edit':
        return edit_obj(obj)
    elif a.func == 'disable':
        obj.disable()
    elif a.func == 'enable':
        obj.enable()


try:
    if a.command == 'test':
        result = api.test()
    elif a.command == 'addr':
        if a.func == 'list':
            result = roboger.manager.list_addr()
        elif a.func == 'create':
            result = dict(roboger.manager.create_addr())
        else:
            addr = roboger.manager.Addr(id=a.resource)
            if a.func == 'change':
                addr.change()
                result = addr.a
            else:
                result = process_obj_func(addr)
    elif a.command == 'endpoint':
        if a.func == 'list':
            addr = roboger.manager.Addr(id=a.resource)
            result = [dict(ep) for ep in addr.list_endpoints()]
        elif a.func == 'create':
            addr = roboger.manager.Addr(id=a.resource)
            result = dict(addr.create_endpoint(plugin_name=a.plugin_name))
        else:
            try:
                addr_id, ep_id = a.resource.split('/', 1)
            except ValueError:
                raise Exception(
                    'Please specify correct resource path: addr_id/endpoint_id')
            ep = roboger.manager.Endpoint(id=ep_id, addr_id=addr_id)
            result = process_obj_func(ep)
    elif a.command == 'subscription':
        if a.func in ['list', 'create']:
            try:
                addr_id, ep_id = a.resource.split('/', 1)
            except ValueError:
                raise Exception(
                    'Please specify correct resource path: addr_id/endpoint_id')
            ep = roboger.manager.Endpoint(id=ep_id, addr_id=addr_id)
            if a.func == 'list':
                result = [dict(s) for s in ep.list_subscriptions()]
            elif a.func == 'create':
                result = dict(ep.create_subscription())
        else:
            try:
                addr_id, ep_id, s_id = a.resource.split('/', 2)
            except ValueError:
                raise Exception('Please specify correct resource path: '
                                'addr_id/endpoint_id/subscription_id')
            s = roboger.manager.Subscription(id=s_id,
                                         addr_id=addr_id,
                                         endpoint_id=ep_id)
            result = process_obj_func(s)
except Exception as e:
    print(f'ERROR: {e}', file=sys.stderr)
    sys.exit(1)

if result:
    if a.output == 'yaml':
        print(yaml.dump(result, default_flow_style=False))
    elif a.output == 'json':
        import json
        print(json.dumps(result, indent=True, sort_keys=True))
    else:
        if isinstance(result, dict) or isinstance(result, list):
            from pprint import pprint
            pprint(result)
        else:
            print(result)
elif result != '' and result != []:
    print('OK')
